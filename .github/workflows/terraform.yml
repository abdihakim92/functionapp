name: Terraform

on:
  push:
    branches:
      - main

jobs:
  terraform:
    runs-on: self-hosted

    defaults:
      run:
        working-directory: terraform

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - uses: hashicorp/setup-terraform@v3

      - name: Set Azure Auth Environment Variables
        run: |
          echo "ARM_SUBSCRIPTION_ID=$(az account show --query id -o tsv)" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=$(az account show --query tenantId -o tsv)" >> $GITHUB_ENV
          echo "ARM_CLIENT_ID=$(az ad signed-in-user show --query id -o tsv)" >> $GITHUB_ENV

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan

      - name: Deploy Azure Function Code
        working-directory: ${{ github.workspace }}
        run: |
          # Install Azure Functions Core Tools
          sudo apt-get update
          sudo apt-get install -y curl apt-transport-https
          curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg
          sudo mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg
          echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/azure-cli.list
          sudo apt-get update
          sudo apt-get install -y azure-functions-core-tools-4

          echo "==== Files in root ===="
          ls -la

          echo "==== Files in function folder ===="
          ls -la CompoundInterestFunction

          func azure functionapp publish compoundcalc-func --python

  test-function:
    needs: terraform
    runs-on: self-hosted

    steps:
      - name: Wait for function app to warm up
        run: sleep 15

      - name: Test function with curl
        run: |
          RESPONSE=$(curl -s -X POST https://compoundcalc-func.azurewebsites.net/api/CompoundCalculator \
            -H "Content-Type: application/json" \
            -d '{"principal": 1000, "rate": 5, "time": 2, "n": 4}')

          echo "Response: $RESPONSE"

          EXPECTED=$(echo "$RESPONSE" | grep -o '"compound_interest":[0-9.]*')
          if [ -z "$EXPECTED" ]; then
            echo "❌ Function response is invalid or empty."
            exit 1
          else
            echo "✅ Function responded correctly: $EXPECTED"
          fi
